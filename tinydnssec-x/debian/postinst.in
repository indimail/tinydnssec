#!/bin/sh
set -e

prefix=@prefix@
sysconfdir=@sysconfdir@
servicedir=@servicedir@

ID=`id -u`
if [ $ID -ne 0 ] ; then
	echo "You are not root" >&2
	exit 1
fi

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

# we are doing upgrade or removal

upgrade=0
case "$1" in
    configure)
		if [ " $2" = " " ] ; then
			echo "installing tinydnssec"
		else
			echo "upgrading tinydnssec $2"
			upgrade=1
		fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    exit 0
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

configure_resolvconf()
{
dnscache_configured=0
if [ -d ${sysconfdir}/dnscache ] ; then
	dnscache_configured=1
	if [ -d ${servicedir} ] ; then
		if [ ! -h ${servicedir}/dnscache ] ; then
			ln -sf ${sysconfdir}/dnscache ${servicedir}/dnscache || true
			if [ $? -ne 0 ] ; then
				dnscache_configured=0
			fi
		fi
	elif [ -h ${servicedir} ] ; then
		dir=`readlink ${servicedir}`
		if [ -d $dir ] ; then
			if [ ! -h $dir/dnscache ] ; then
				ln -sf ${sysconfdir}/dnscache $dir/dnscache || true
				if [ $? -ne 0 ] ; then
					dnscache_configured=0
				fi
			fi
		fi
	fi
fi
if [ $dnscache_configured -eq 1 ] ; then
  if [ -d ${servicedir}/.svscan ] ; then
    mkdir -p ${servicedir}/.svscan/variables
    echo > ${servicedir}/.svscan/variables/UNSHARE # used by svscanboot
    if [ -x /usr/bin/unshare -a -x ${servicedir}/dnscache/run ] ; then
      if [ -f ${servicedir}/.svscan/run ] ; then
        /bin/chmod +x ${servicedir}/.svscan/run
      fi
    fi
  fi
  grep resolvconf ${servicedir}/.svscan/variables/.options > /dev/null 2>&1
  if [ $? -ne 0 ] ; then
    options="`cat ${servicedir}/.svscan/variables/.options`"
    options="$options --resolvconf"
    mv ${servicedir}/.svscan/variables/.options \
      ${servicedir}/.svscan/variables/.options.noresolvconf
    echo $options > ${servicedir}/.svscan/variables/.options
    if [ -x ${prefix}/sbin/minisvc ] ; then
      ${prefix}/sbin/minisvc --refreshsvc=/service/.svscan
    fi
  fi
fi
}

if [ $upgrade -eq 1 ] ; then
	set +e
	configure_resolvconf
	# end of of resolvconf config
	if [ -f ${prefix}/bin/svok ] ; then
		for i in tinydns tinydns/log dnscache dnscache/log curvedns curvedns/log dqcache dqcache/log
		do
			${prefix}/bin/svok ${sysconfdir}/$i >/dev/null 2>&1
			if [ $? -eq 0 -a -f ${sysconfdir}/$i/.down ] ; then
				/bin/rm -f ${sysconfdir}/$i/.down
				${prefix}/bin/svc -u ${sysconfdir}/$i >/dev/null 2>&1
			fi
		done
	fi
	set -e
	exit 0
fi

/bin/rmdir --ignore-fail-on-non-empty ${sysconfdir}/dnscache 2>/dev/null
/bin/rmdir --ignore-fail-on-non-empty ${sysconfdir}/tinydns 2>/dev/null

dnscache_configured=0
if [ ! -d ${sysconfdir}/dnscache ] ; then
  set +e
  ${prefix}/sbin/dnscache-conf Gdnscache qmaill ${sysconfdir}/dnscache 127.0.0.1 || true
  if [ $? -eq 0 ] ; then
    dnscache_configured=1
    if [ -d ${servicedir} ] ; then
      if [ ! -h ${servicedir}/dnscache ] ; then
        ln -sf ${sysconfdir}/dnscache ${servicedir}/dnscache || true
        if [ $? -ne 0 ] ; then
          dnscache_configured=0
        fi
      fi
    elif [ -h ${servicedir} ] ; then
      dir=`readlink ${servicedir}`
      if [ -d $dir ] ; then
        if [ ! -h ${servicedir}/dnscache ] ; then
          ln -sf ${sysconfdir}/dnscache ${servicedir}/dnscache || true
          if [ $? -ne 0 ] ; then
            dnscache_configured=0
          fi
        fi
      fi
    fi
  else
    echo "${prefix}/sbin/dnscache-conf Gdnscache qmaill ${sysconfdir}/dnscache 127.0.0.1: failed"
  fi
else
  dnscache_configured=1
fi
configure_resolvconf
set -e

for i in tinydns dqcache curvedns
do
  if [ " $i" = " dqcache" ] ; then
    acct=Gdnscache
  else
    acct=Gtinydns
  fi
  if [ " $i" = " curvedns" ] ; then
    ip=x.x.x.x
  else
    ip=127.0.0.1
  fi
  if [ ! -d ${sysconfdir}/$i ] ; then
    ${prefix}/sbin/$i-conf $acct qmaill ${sysconfdir}/$i $ip || true
    if [ ! " $i" = " curvedns" ] ; then
      continue
    fi
    if [ -d ${sysconfdir}/$i ] ; then
      mask=`umask`
      umask 077
      # Generate private key
      sed -n \$p ${sysconfdir}/curvedns/private.key > ${sysconfdir}/$i/curvedns.keygen
      /bin/sh ${sysconfdir}/$i/curvedns.keygen && /bin/rm -f ${_sysconfdir}/$i/curvedns.keygen
      umask $mask
    fi
  fi
done
